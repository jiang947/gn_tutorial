import("//build/config/android/rules.gni")
import("//gn_tutorial/android/build/bison_project.gni")
# import("//gn_tutorial/android/build/generate_bison_library.gni")


group("bar"){

}





# generate_android_project("bar_project") {
#   android_manifest ="AndroidManifest.xml"
#   template_dir = "xwalkcore_library_template"

#   deps = [
#     ":bar_java"
#   ]

# }

# 这里命名有坑， 必须要包含'java'
android_library("bar_java"){
  java_files = [
    "java/com/jsq/bar/ReadResWapper.java",
  ]
  deps = [
    ":bar_resources",
    "//gn_tutorial/android/foo:foo_java"
  ]
}

# 这里命名有坑， 必须要包含'resources'
android_resources("bar_resources") {
  resource_dirs = [ "res" ]
  custom_package = "com.jsq.bar"
}


dist_aar("bar_dist_aar"){
  android_manifest = "AndroidManifest.xml"
  deps = [
    ":bar_java",
  ]

  output = "$root_build_dir/aars/bar_dist_aar.aar"
  
}

# android_library("bar_aar_java"){
#   srcjar_deps = [
#     ":bar_java",
#     "//gn_tutorial/android/foo:foo_java"
#   ]
# }

# android_aar("bar_aar"){
#   android_manifest = "AndroidManifest.xml"
#   deps = [
#     ":bar_java",
#     "//gn_tutorial/android/foo:foo_java"
#   ]

#   output = "$root_build_dir/aars/BarAar.aar"
  
# }



# write_build_config("config_bar_aar") {
#     type = "dist_aar"
#    # forward_variables_from(invoker, [ "proguard_configs" ])
#     possible_config_deps = _deps
#     supports_android = true
#     requires_android = true
#     build_config = _build_config

#     dex_path = _base_path + "__unused.dex"
# }